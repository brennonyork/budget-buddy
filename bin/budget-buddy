#!/usr/bin/env sh

# Handles operations in this order:
# 1. 'transform' the columns to be in the correct order and only
#    containing the columns needed
# 2. remove the header from the file (if it exists)
# 3. determine the maximum date from the file
# 4. use the maximum date to rename the file so we can avoid
#    naming conflicts after we've processed, useful given statements
#    all start at different dates. this program *does not* dedupe
#    individual transactions therefore needs to ensure we process each
#    record exactly once and max date matches each statement
# 5. merge all clean files from various financial sources into a single
#    unified file
# 6. sort the single file by date (1st column)
# 7. cut the file up into monthly files starting and ending within the
#    month (to remove the problem of various statements starting and
#    ending at different times)
# 8. for each monthly file apply the category rulesets

# Grab the directory of this script
# - from https://stackoverflow.com/a/246128
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd)"

# Staging (temporary), output, and merged file name
TMP_DIR="${DIR}/../tmp"
OUTPUT_DIR="${DIR}/../output"
MERGE_FILE="${TMP_DIR}/merged.csv"

# Settings that can be set through the command line
VERBOSE=""
SEARCH_DIR=""
RULESET_FILE=""
SPLIT_BY_MONTH=""
INCL_HISTORY=""

# Source in the core functions from the lib/ directory
source "${DIR}/../lib/transform.sh"
source "${DIR}/../lib/help.sh"

# Command line parser for the help option
#  $ budget-buddy --help
#  $ budget-buddy -h
if [ "${1}" = "--help" ] || [ "${1}" = "-h" ]; then
    print_help
    exit 0
fi

# Command line parser
#   $ budget-buddy [ opts ] -d <directory> -r <ruleset-file>
while (( "$#" )); do
    case "${1}" in
	"-v" | "--verbose")
	    VERBOSE="1"
	    shift
	    ;;
	"-d" | "--directory")
	    SEARCH_DIR="${2}"
	    shift 2
	    ;;
	"-r" | "--ruleset")
	    RULESET_FILE="${2}"
	    shift 2
	    ;;
	"-s" | "--split")
	    SPLIT_BY_MONTH="1"
	    shift
	    ;;
	"-h" | "--history")
	    INCL_HISTORY="1"
	    shift
	    ;;
	*)
	    printf "WARN: Unrecognized option ${1}\n"
	    shift
	    ;;
    esac
done

if [ "${SEARCH_DIR}" = "" ]; then
    printf "ERROR: did not provide search directory, '-h' for help.\n"
    exit 1
fi

mkdir -p "${TMP_DIR}"
mkdir -p "${OUTPUT_DIR}"

for fin_src in "${FINANCE_SOURCES[@]}"; do
    mkdir -p "${TMP_DIR}/${fin_src}"
done

find "${SEARCH_DIR}" -type f | \
    while read line; do
    # grab the filename from the absolute path
    filename="$(basename ${line})"
    # grab the first line from the file and trim non-ascii chars
    title="$(head -1 $line 2>/dev/null | tr -d '[:cntrl:]' 2>/dev/null)"

    [ ! "${VERBOSE}" = "" ] && printf "Processing file - ${line}\n"
    
    # we can't use case statements w/regex so we run multi-line
    # if statements :grimace:
    # lets start w chase
    if [[ "${filename}" \
	      =~ ^Chase[0-9]{4}_Activity.*\.CSV$ ]] &&
	   [ "${title}" \
		 = "Transaction Date,Post Date,Description,Category,Type,Amount" ]; then
	[ ! "${VERBOSE}" = "" ] && printf "Chase file found: ${filename}\n"
	handle_single_file "${TMP_DIR}/chase" \
			   "${OUTPUT_DIR}/chase" \
			   "${line}" \
			   "chase" \
			   "true" \
			   "%M/%d/%Y"
	# capital one
    elif [[ "${filename}" \
		=~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}_transaction_download.* ]] &&
	     [ "${title}" \
		   = "Transaction Date,Posted Date,Card No.,Description,Category,Debit,Credit" ]; then
	[ ! "${VERBOSE}" = "" ] && \
	    printf "Capital One file found: ${filename}\n"
	handle_single_file "${TMP_DIR}/c1" \
			   "${OUTPUT_DIR}/c1" \
			   "${line}" \
			   "c1" \
			   "true" \
			   "%Y-%M-%d"
	# usaa
    elif [[ "${filename}" =~ ^bk_download.*\.csv$ ]]; then
	[ ! "${VERBOSE}" = "" ] && printf "USAA file found: ${filename}\n"
	handle_single_file "${TMP_DIR}/usaa" \
			   "${OUTPUT_DIR}/usaa" \
			   "${line}" \
			   "usaa" \
			   "false" \
			   "%M/%d/%Y"
	# bank of america
    elif [[ "${filename}" =~ ^.*[0-9]{4}_[0-9]{4}\.csv$ ]] &&
	     [ "${title}" \
		   = "Posted Date,Reference Number,Payee,Address,Amount" ]; then
	[ ! "${VERBOSE}" = "" ] && \
	    printf "Bank Of America file found: ${filename}\n"
	handle_single_file "${TMP_DIR}/boa" \
			   "${OUTPUT_DIR}/boa" \
			   "${line}" \
			   "boa" \
			   "true" \
			   "%M/%d/%Y"
    fi
done

# 5. merge all clean files from various financial sources into a single
#    unified file
for file in $(find "${TMP_DIR}" -type f); do
    cat "${file}" >> "${MERGE_FILE}"
done

# 6. sort the single file by date (1st column)
sort --reverse "${MERGE_FILE}" > "${MERGE_FILE}.sorted"
mv "${MERGE_FILE}.sorted" "${MERGE_FILE}"

# 7. apply the ruleset patterns across the unified file
if [ ! "${RULESET_FILE}" = "" ]; then
    if [ ! "${INCL_HISTORY}" = "" ]; then
	python "${DIR}/../lib/ruleset_apply.py" "${RULESET_FILE}" "${MERGE_FILE}" "${INCL_HISTORY}"
    else
	python "${DIR}/../lib/ruleset_apply.py" "${RULESET_FILE}" "${MERGE_FILE}"
    fi
fi

# 8. cut the file up into monthly files starting and ending within the
#    month (to remove the problem of various statements starting and
#    ending at different times) if denoted on the command line
if [ ! "${SPLIT_BY_MONTH}" == "" ]; then
    split_file_by_month "${MERGE_FILE}" "${OUTPUT_DIR}"
else
    mv "${MERGE_FILE}" "${OUTPUT_DIR}/output.csv"
fi

# Clean up!
rm -rf "${TMP_DIR}"
